<snippet>
  <content><![CDATA[
struct LCA
{
    int num_of_nodes, len;
    pair<int, int> def_val;
    vector<int> first;
    vector<int> euler;
    vector<int> depth;
    vector<pair<int, int>> tree;

    LCA()
    {
        // Empty Constructor
    }

    LCA(vector<vector<int>> &adj, int root = 1)
    {
        num_of_nodes = (int)adj.size() - 1;
        first.resize(num_of_nodes + 1);
        euler.resize(2 * num_of_nodes);
        depth.resize(num_of_nodes + 1, 1e9);

        int counter = 1;
        dfs(root, 0, adj, counter, 0);

        len = (1 << (int)(ceill(log2((int)euler.size()))));
        def_val = {1e9, 1e9};
        tree.resize(len << 1, def_val);
        for (int i = 0; i < (int)euler.size(); i++)
        {
            tree[len + i] = {depth[euler[i]], euler[i]};
        }
        build(1);
    }

    int get_lca(int node1, int node2)
    {
        int left = first[node1], right = first[node2];

        if (left > right)
        {
            swap(left, right);
        }

        return query(1, left, right, 0, len - 1).second;
    }

    int get_dist(int node1, int node2)
    {
        int common = get_lca(node1, node2);
        int dist = depth[node1] + depth[node2] - 2 * depth[common];
        return dist;
    }

private:
    void dfs(int node, int parent, vector<vector<int>> &adj, int &counter, int current_depth = 0)
    {
        depth[node] = current_depth;
        first[node] = counter;
        euler[counter] = node;
        counter++;
        for (auto next_node : adj[node])
        {
            if (next_node != parent)
            {
                dfs(next_node, node, adj, counter, current_depth + 1);
                euler[counter] = node;
                counter++;
            }
        }
    }

    pair<int, int> merge_nodes(pair<int, int> left, pair<int, int> right)
    {
        return (left.first < right.first) ? left : right;
    }

    pair<int, int> build(int current_node)
    {
        if (current_node >= len)
        {
            return tree[current_node];
        }
        tree[current_node] = merge_nodes(build((current_node << 1)), build((current_node << 1) + 1));
        return tree[current_node];
    }

    pair<int, int> query(int current_node, int query_l, int query_r, int tree_l, int tree_r)
    {
        if (query_l <= tree_l && tree_r <= query_r)
        {
            return tree[current_node];
        }

        if (query_l > tree_r || query_r < tree_l)
        {
            return def_val;
        }

        int mid = ((tree_l + tree_r) >> 1);
        return merge_nodes(query((current_node << 1), query_l, query_r, tree_l, mid), query((current_node << 1) + 1, query_l, query_r, mid + 1, tree_r));
    }
};
]]></content>
  <tabTrigger>lowest common ancestor </tabTrigger>
  <description>Lowest Common ancestor</description>
  <scope>source.c++</scope>
</snippet>