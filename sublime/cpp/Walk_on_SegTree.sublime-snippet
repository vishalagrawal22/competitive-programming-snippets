<snippet>
  <content><![CDATA[
struct segment_tree
{
    int n;
    int def_val;
    vector<int> tree;

    inline int merge_nodes(int left, int right)
    {
        return max(left, right);
    }

    inline int check(int node, int val)
    {
        return (tree[node] >= val);
    }

    segment_tree()
    {
        // Empty Constructor
    }

    segment_tree(int len, int val)
    {
        n = (1LL << (int)(ceill(log2(len))));
        def_val = val;

        tree.resize(n << 1, def_val);
    }

    segment_tree(vector<int> &elements, int val)
    {
        n = (1 << (int)(ceill(log2((int)elements.size()))));
        def_val = val;

        tree.resize(n << 1, def_val);
        for (int i = 0; i < (int)elements.size(); i++)
        {
            tree[n + i] = elements[i];
        }

        build_inner(1);
    }

    int query(int l, int r)
    {
        return query_inner(1, l, r, 0, n - 1);
    }

    void update(int pos, int val)
    {
        tree[n + pos] = val;
        update_inner((n + pos) >> 1);
    }

    pair<int, int> walk(int l, int r, int x)
    {
        return walk_inner(1, 0, n - 1, l, r, x);
    }

private:
    pair<int, int> walk_inner(int current_node, int node_l, int node_r, int query_l, int query_r, int val)
    {
        if (node_r < query_l || query_r < node_l)
        {
            return {0, -1};
        }
        else if (node_l == node_r)
        {
            if (check(current_node, val))
            {
                return {1, current_node - n};
            }
            else
            {
                return {0, -1};
            }
        }
        else
        {
            if (!check(current_node, val))
            {
                return {0, -1};
            }

            int mid = (node_l + node_r) / 2;
            pair<int, int> res = walk_inner((current_node << 1), node_l, mid, query_l, query_r, val);
            if (res.first)
            {
                return res;
            }
            res = walk_inner((current_node << 1) + 1, mid + 1, node_r, query_l, query_r, val);
            return res;
        }
    }

    int build_inner(int current_node)
    {
        if (current_node >= n)
        {
            return tree[current_node];
        }
        tree[current_node] = merge_nodes(build_inner((current_node << 1)), build_inner((current_node << 1) + 1));
        return tree[current_node];
    }

    void update_inner(int current_node)
    {
        if (current_node == 0)
        {
            return;
        }

        tree[current_node] = merge_nodes(tree[(current_node << 1)], tree[(current_node << 1) + 1]);
        update_inner((current_node >> 1));
    }

    int query_inner(int current_node, int query_l, int query_r, int tree_l, int tree_r)
    {
        if (query_l <= tree_l && tree_r <= query_r)
        {
            return tree[current_node];
        }

        if (query_l > tree_r || query_r < tree_l)
        {
            return def_val;
        }

        int mid = ((tree_l + tree_r) >> 1);
        return merge_nodes(query_inner((current_node << 1), query_l, query_r, tree_l, mid), query_inner((current_node << 1) + 1, query_l, query_r, mid + 1, tree_r));
    }
};
]]></content>
  <tabTrigger>Walk on SegTree</tabTrigger>
  <description></description>
  <scope>source.c++</scope>
</snippet>