<snippet>
  <content><![CDATA[
const int MAX_LIMIT = 1e6;
vector<int> primes;
bool isPrime[MAX_LIMIT + 1];
int phi[MAX_LIMIT + 1];

void totient()
{
    memset(isPrime, true, sizeof(isPrime));
    memset(phi, -1, sizeof(phi));
    isPrime[1] = false;
    phi[1] = 1;
    primes.reserve((MAX_LIMIT + 10) / 10);
    for (int i = 2; i <= MAX_LIMIT; i++)
    {
        if (isPrime[i])
        {
            phi[i] = i - 1;
            primes.push_back(i);
        }
        for (int j = 0; j < (int)primes.size() && i * primes[j] <= MAX_LIMIT; j++)
        {
            isPrime[i * primes[j]] = false;
            if (i % primes[j] != 0)
            {
                phi[i * primes[j]] = phi[i] * phi[primes[j]];
            }
            else
            {
                phi[i * primes[j]] = primes[j] * phi[i];
                break;
            }
        }
    }
}
]]></content>
  <tabTrigger>Euler Totient</tabTrigger>
  <description>precompute euler totient function</description>
  <scope>source.c++</scope>
</snippet>