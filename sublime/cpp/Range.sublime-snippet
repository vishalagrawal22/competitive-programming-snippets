<snippet>
  <content><![CDATA[
struct segment_tree
{
    int N;
    ${1:int} def_val;
    vector<${1:int}> tree;

    inline ${1:int} merge_nodes(${1:int} left, ${1:int} right)
    {
        ${0}
    }

    segment_tree()
    {
        // Empty Constructor
    }

    segment_tree(int len, ${1:int} val)
    {
        N = (1LL << (int)(ceill(log2(len))));
        def_val = val;
        
        tree.resize(N << 1, def_val);
    }

    segment_tree(vector<${1:int}> &elements, ${1:int} val)
    {
        N = (1 << (int)(ceill(log2((int)elements.size()))));
        def_val = val;

        tree.resize(N << 1, def_val);
        for (int i = 0; i < (int)elements.size(); i++)
        {
            tree[N + i] = elements[i];
        }

        build_inner(1);
    }

    ${1:int} query(int l, int r)
    {
        return query_inner(1, l, r, 0, N - 1);
    }

    void update(int pos, ${1:int} val)
    {
        tree[N + pos] = val;
        update_inner((N + pos) >> 1);
    }

    ${1:int} build_inner(int current_node)
    {
        if (current_node >= N)
        {
            return tree[current_node];
        }
        tree[current_node] = merge_nodes(build_inner((current_node << 1)), build_inner((current_node << 1) + 1));
        return tree[current_node];
    }

    void update_inner(int current_node)
    {
        if (current_node == 0)
        {
            return;
        }

        tree[current_node] = merge_nodes(tree[(current_node << 1)], tree[(current_node << 1) + 1]);
        update_inner((current_node >> 1));
    }

    ${1:int} query_inner(int current_node, int query_l, int query_r, int tree_l, int tree_r)
    {
        if (query_l <= tree_l && tree_r <= query_r)
        {
            return tree[current_node];
        }

        if (query_l > tree_r || query_r < tree_l)
        {
            return def_val;
        }

        int mid = ((tree_l + tree_r) >> 1);
        return merge_nodes(query_inner((current_node << 1), query_l, query_r, tree_l, mid), query_inner((current_node << 1) + 1, query_l, query_r, mid + 1, tree_r));
    }
};
]]></content>
  <tabTrigger>Range</tabTrigger>
  <description>Segment Tree Struct</description>
  <scope>source.c++</scope>
</snippet>