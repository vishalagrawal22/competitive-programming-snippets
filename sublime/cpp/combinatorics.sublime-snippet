<snippet>
  <content><![CDATA[
#include "bits/stdc++.h"

using big = long long;
using ld = long double;
const char nl = '\n';
#define all(x) (x).begin(), (x).end()
#define precise(x) \
    fixed << setprecision(x)
#define set_bit_count(x) __builtin_popcountll(x)
#ifdef Haunted_Knight
#define msg(statement) cerr << statement << endl
#define dbg(var) cerr << (#var) << ": " << var << endl
#else
#define msg(statement)
#define dbg(var)
#endif

using namespace std;

template <typename T>
using min_heap = priority_queue<T, vector<T>, greater<T>>;
template <typename T>
using max_heap = priority_queue<T>;

template <class T>
ostream &operator<<(ostream &os, min_heap<T> H)
{
    while (!H.empty())
    {
        os << H.top() << " ";
        H.pop();
    }
    os << endl;
    return os << "";
}

template <class T>
ostream &operator<<(ostream &os, max_heap<T> H)
{
    while (!H.empty())
    {
        os << H.top() << " ";
        H.pop();
    }
    os << endl;
    return os << "";
}

template <class L, class R>
ostream &operator<<(ostream &os, pair<L, R> P)
{
    return os << P.first << " " << P.second;
}

template <class T>
ostream &operator<<(ostream &os, vector<T> arr)
{
    for (int i = 0; i < (int)arr.size(); i++)
    {
        os << arr[i] << " ";
    }
    return os << "";
}

template <class T>
ostream &operator<<(ostream &os, vector<vector<T>> matrix)
{
    os << endl;
    for (int i = 0; i < (int)matrix.size(); i++)
    {
        for (int j = 0; j < (int)matrix[i].size(); j++)
        {
            os << matrix[i][j] << " ";
        }
        os << endl;
    }
    return os << "";
}

template <class T>
ostream &operator<<(ostream &os, set<T> S)
{
    for (auto s : S)
    {
        os << s << " ";
    }
    return os << "";
}

template <class T>
ostream &operator<<(ostream &os, multiset<T> S)
{
    for (auto s : S)
    {
        os << s << " ";
    }
    return os << "";
}

template <class L, class R>
ostream &operator<<(ostream &os, map<L, R> M)
{
    os << endl;
    for (auto m : M)
    {
        os << m << endl;
    }
    return os << "";
}

template <class L, class R>
ostream &operator<<(ostream &os, multimap<L, R> M)
{
    os << endl;
    for (auto m : M)
    {
        os << m << endl;
    }
    return os << "";
}

const int max_n = 2e5;
const int mod = 1e9 + 7;
// const int mod = 998244353;

inline int add(int val1, int val2)
{
    int ans = val1 + val2;
    if (ans >= mod)
    {
        ans -= mod;
    }
    return ans;
}

inline int sub(int val1, int val2)
{
    int ans = val1 - val2;
    if (ans < 0)
    {
        ans += mod;
    }
    return ans;
}

inline int mult(int val1, int val2)
{
    int ans = (val1 * 1LL * val2) % mod;
    return ans;
}

int power(int base, int val)
{
    base = base % mod;
    int res = 1;
    while (val > 0)
    {
        if ((val & 1))
        {
            res = mult(res, base);
        }
        base = mult(base, base);
        val = (val >> 1);
    }
    return res;
}

int modInverse(int num)
{
    return power(num, mod - 2);
}

int divide(int val1, int val2)
{
    int val3 = modInverse(val2);
    int ans = mult(val1, val3);
    return ans;
}

vector<int> factorial(max_n + 1);
vector<int> mmi(max_n + 1);
void calculate_factorial()
{
    factorial[0] = 1;
    mmi[0] = 1;
    for (int i = 1; i <= max_n; i++)
    {
        factorial[i] = mult(factorial[i - 1], i);
    }
    mmi[max_n] = modInverse(factorial[max_n]);
    for (int i = max_n - 1; i >= 1; i--)
    {
        mmi[i] = mult(mmi[i + 1], i + 1);
    }
}

int nCr(int n, int r)
{
    if (n < r)
        return 0;
    if (r == 0)
        return 1;

    return mult(mult(factorial[n], mmi[r]), mmi[n - r]);
}

void solve(){
    $0}

int32_t main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    calculate_factorial();
    // freopen("input.in", "r", stdin);
    // freopen("output.out", "w", stdout);
    int no_of_testcases = 1;
    // $1cin >> no_of_testcases;
    for (int i = 1; i <= no_of_testcases; i++)
    {
        // cout << "Case #" << i << ": ";
        solve();
    }
    return 0;
}
]]></content>
  <tabTrigger>combinatorics</tabTrigger>
  <description>nCr with ModInverse</description>
  <scope>source.c++</scope>
</snippet>