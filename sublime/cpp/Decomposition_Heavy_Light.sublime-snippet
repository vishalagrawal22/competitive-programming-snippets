<snippet>
  <content><![CDATA[
struct LCA
{
    int num_of_nodes, len;
    pair<int, int> def_val;
    vector<int> first;
    vector<int> euler;
    vector<int> depth;
    vector<pair<int, int>> tree;

    LCA()
    {
        // Empty Constructor
    }

    LCA(vector<vector<int>> &adj, int root = 1)
    {
        num_of_nodes = (int)adj.size() - 1;
        first.resize(num_of_nodes + 1);
        euler.resize(2 * num_of_nodes);
        depth.resize(num_of_nodes + 1, 1e18);

        int counter = 1;
        dfs(root, 0, adj, counter, 0);

        len = (1 << (int)(ceill(log2((int)euler.size()))));
        def_val = {1e18, 1e18};
        tree.resize(len << 1, def_val);
        for (int i = 0; i < (int)euler.size(); i++)
        {
            tree[len + i] = {depth[euler[i]], euler[i]};
        }
        build(1);
    }

    int lca(int node1, int node2)
    {
        int left = first[node1], right = first[node2];

        if (left > right)
        {
            swap(left, right);
        }

        return query(1, left, right, 0, len - 1).second;
    }

private:
    void dfs(int node, int parent, vector<vector<int>> &adj, int &counter, int current_depth = 0)
    {
        depth[node] = current_depth;
        first[node] = counter;
        euler[counter] = node;
        counter++;
        for (auto next_node : adj[node])
        {
            if (next_node != parent)
            {
                dfs(next_node, node, adj, counter, current_depth + 1);
                euler[counter] = node;
                counter++;
            }
        }
    }

    pair<int, int> merge_nodes(pair<int, int> left, pair<int, int> right)
    {
        return (left.first < right.first) ? left : right;
    }

    pair<int, int> build(int current_node)
    {
        if (current_node >= len)
        {
            return tree[current_node];
        }
        tree[current_node] = merge_nodes(build((current_node << 1)), build((current_node << 1) + 1));
        return tree[current_node];
    }

    pair<int, int> query(int current_node, int query_l, int query_r, int tree_l, int tree_r)
    {
        if (query_l <= tree_l && tree_r <= query_r)
        {
            return tree[current_node];
        }

        if (query_l > tree_r || query_r < tree_l)
        {
            return def_val;
        }

        int mid = ((tree_l + tree_r) >> 1);
        return merge_nodes(query((current_node << 1), query_l, query_r, tree_l, mid), query((current_node << 1) + 1, query_l, query_r, mid + 1, tree_r));
    }
};

struct segment_tree
{
    int N;
    int def_val;
    vector<int> tree;

    int merge_nodes(int left, int right)
    {
        return max(left, right);
    }

    segment_tree()
    {
        // Empty Constructor
    }

    segment_tree(vector<int> &elements, int val)
    {
        N = (1 << (int)(ceill(log2((int)elements.size()))));
        def_val = val;

        tree.resize(N << 1, def_val);
        for (int i = 0; i < (int)elements.size(); i++)
        {
            tree[N + i] = elements[i];
        }

        build_inner(1);
    }

    int query(int l, int r)
    {
        return query_inner(1, l, r, 0, N - 1);
    }

    void update(int pos, int val)
    {
        tree[N + pos] = val;
        update_inner((N + pos) >> 1);
    }

private:
    int build_inner(int current_node)
    {
        if (current_node >= N)
        {
            return tree[current_node];
        }
        tree[current_node] = merge_nodes(build_inner((current_node << 1)), build_inner((current_node << 1) + 1));
        return tree[current_node];
    }

    void update_inner(int current_node)
    {
        if (current_node == 0)
        {
            return;
        }

        tree[current_node] = merge_nodes(tree[(current_node << 1)], tree[(current_node << 1) + 1]);
        update_inner((current_node >> 1));
    }

    int query_inner(int current_node, int query_l, int query_r, int tree_l, int tree_r)
    {
        if (query_l <= tree_l && tree_r <= query_r)
        {
            return tree[current_node];
        }

        if (query_l > tree_r || query_r < tree_l)
        {
            return def_val;
        }

        int mid = ((tree_l + tree_r) >> 1);
        return merge_nodes(query_inner((current_node << 1), query_l, query_r, tree_l, mid), query_inner((current_node << 1) + 1, query_l, query_r, mid + 1, tree_r));
    }
};

struct HLD
{
    int N;
    int seg = 1, visited = 0;
    vector<int> segment, start, pos, children, uplink;
    segment_tree tree;

    // Input
    vector<int> value;
    vector<vector<int>> adj;

    // Extra
    LCA ds;

    HLD()
    {
        // Empty Constructor
    }

    HLD(int nodes, vector<vector<int>> &temp_adj, vector<int> &temp_value)
    {
        reset();

        N = nodes;
        segment.resize(N + 1);
        start.resize(N + 1);
        pos.resize(N + 1);
        uplink.resize(N + 1);
        children.resize(N + 1);
        value = temp_value;
        adj = temp_adj;

        dfs(1, 0);

        start[seg] = visited;

        decompose(1, 0, 0);

        vector<int> leafs(N + 1);
        for (int i = 1; i <= N; i++)
        {
            leafs[start[segment[i]] + pos[i]] = value[i];
        }

        tree = segment_tree(leafs, 0);

        // Extra
        ds = LCA(adj);
    }

    void reset()
    {
        segment.clear();
        start.clear();
        pos.clear();
        uplink.clear();
        children.clear();
        value.clear();
        adj.clear();
        tree = segment_tree();

        // Extra
        ds = LCA();
    }

    int dfs(int node, int parent)
    {
        children[node] = 1;
        for (auto &&child : adj[node])
        {
            if (child != parent)
            {
                children[node] += dfs(child, node);
            }
        }
        return children[node];
    }

    void decompose(int node, int parent, int cur)
    {
        visited++;
        segment[node] = seg;
        pos[node] = cur;

        int heavy = 0;
        int max_size = 0;
        for (auto &&child : adj[node])
        {
            if (child != parent)
            {
                if (max_size < children[child])
                {
                    heavy = child;
                    max_size = children[child];
                }
            }
        }

        if (heavy != 0)
        {
            decompose(heavy, node, cur + 1);
        }

        for (auto &&child : adj[node])
        {
            if (child != parent && child != heavy)
            {
                seg++;
                uplink[seg] = node;
                start[seg] = visited;
                decompose(child, node, 0);
            }
        }
    }

    void update(int node, int val)
    {
        tree.update(start[segment[node]] + pos[node], val);
    }

    // Extra
    int solve_query(int node, int common)
    {
        int ans = 0;
        while (segment[node] != segment[common])
        {
            ans = max(ans, tree.query(start[segment[node]], start[segment[node]] + pos[node]));
            node = uplink[segment[node]];
        }
        ans = max(ans, tree.query(start[segment[common]] + pos[common], start[segment[node]] + pos[node]));
        return ans;
    }

    int query(int node1, int node2)
    {
        int common = ds.lca(node1, node2);
        return max(solve_query(node1, common), solve_query(node2, common));
    }
};
]]></content>
  <tabTrigger>Decomposition Heavy Light </tabTrigger>
  <description>Heavy Light Decomposition</description>
  <scope>source.c++</scope>
</snippet>