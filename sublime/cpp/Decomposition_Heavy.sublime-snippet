<snippet>
  <content><![CDATA[
struct segment_tree
{
    int N;
    int def_val;
    vector<int> tree;
 
    int merge_nodes(int left, int right)
    {
        return max(left, right);
    }
 
    segment_tree()
    {
        // Empty Constructor
    }
 
    segment_tree(int len, int val)
    {
        N = (1LL << (int)(ceill(log2(len))));
        def_val = val;
        
        tree.resize(N << 1, def_val);
    }
 
    segment_tree(vector<int> &elements, int val)
    {
        N = (1 << (int)(ceill(log2((int)elements.size()))));
        def_val = val;
 
        tree.resize(N << 1, def_val);
        for (int i = 0; i < (int)elements.size(); i++)
        {
            tree[N + i] = elements[i];
        }
 
        build_inner(1);
    }
 
    int query(int l, int r)
    {
        return query_inner(1, l, r, 0, N - 1);
    }
 
    void update(int pos, int val)
    {
        tree[N + pos] = val;
        update_inner((N + pos) >> 1);
    }
 
private:
    int build_inner(int current_node)
    {
        if (current_node >= N)
        {
            return tree[current_node];
        }
        tree[current_node] = merge_nodes(build_inner((current_node << 1)), build_inner((current_node << 1) + 1));
        return tree[current_node];
    }
 
    void update_inner(int current_node)
    {
        if (current_node == 0)
        {
            return;
        }
 
        tree[current_node] = merge_nodes(tree[(current_node << 1)], tree[(current_node << 1) + 1]);
        update_inner((current_node >> 1));
    }
 
    int query_inner(int current_node, int query_l, int query_r, int tree_l, int tree_r)
    {
        if (query_l <= tree_l && tree_r <= query_r)
        {
            return tree[current_node];
        }
 
        if (query_l > tree_r || query_r < tree_l)
        {
            return def_val;
        }
 
        int mid = ((tree_l + tree_r) >> 1);
        return merge_nodes(query_inner((current_node << 1), query_l, query_r, tree_l, mid), query_inner((current_node << 1) + 1, query_l, query_r, mid + 1, tree_r));
    }
};
 
struct HLD
{
    vector<int> euler, uplink, path_of, path_start, sz;
    vector<vector<int>> subtree;
 
    // Segment Tree
    int tree_len;
    segment_tree tree;
 
 
    // one time use variables
    int cur_path = 1, visited = 1;
 
    // INPUT
    int N, def_val;
    vector<vector<int>> adj;
 
    HLD()
    {
    }
 
    HLD(int n, vector<vector<int>> &g, vector<int> &value)
    {
        N = n;
        adj = g;
 
        euler.resize(N + 1);
        uplink.resize(N + 1);
        path_of.resize(N + 1);
        sz.resize(N + 1);
        path_start.resize(N + 1);
        subtree.resize(N + 1, vector<int>(2));
 
        hld_size(1, 0);
 
        path_start[cur_path] = 1;
 
        hld_decompose(1, 0);
 
        vector<int> leafs(N + 1);
        for (int i = 1; i <= N; i++)
        {
            leafs[euler[i]] = value[i];
        }
        tree = segment_tree(leafs, 0);
    }
 
    int hld_size(int node, int parent)
    {
        sz[node] = 1;
        int max_sz = 0;
        for (int i = 0; i < (int)adj[node].size(); i++)
        {
            if (adj[node][i] != parent)
            {
                int temp = hld_size(adj[node][i], node);
                sz[node] += temp;
                if (temp > max_sz)
                {
                    max_sz = temp;
                    swap(adj[node][0], adj[node][i]);
                }
            }
        }
        return sz[node];
    }
 
    void hld_decompose(int node, int parent)
    {
        euler[node] = visited;
        path_of[euler[node]] = cur_path;
        subtree[euler[node]][0] = visited;
        visited++;
 
        if (sz[node] != 1)
        {
            hld_decompose(adj[node][0], node);
        }
 
        for (int i = 1; i < (int)adj[node].size(); i++)
        {
            if (adj[node][i] != parent)
            {
                cur_path++;
                uplink[cur_path] = euler[node];
                path_start[cur_path] = visited;
                hld_decompose(adj[node][i], node);
            }
        }
 
        subtree[euler[node]][1] = visited - 1;
    }
 
    void update(int node, int val)
    {
        tree.update(euler[node], val);
    }
 
    int traverse(int node, int root)
    {
        int ans = 0;
        while (path_of[node] != path_of[root])
        {
            ans = max(ans, tree.query(path_start[path_of[node]], node));
            node = uplink[path_of[node]];
        }
        ans = max(ans, tree.query(root, node));
        return ans;
    }

    int query_subtree(int node)
    {
        return tree.query(subtree[euler[node]][0], subtree[euler[node]][1]);
    }
};
]]></content>
  <tabTrigger>Decomposition Heavy </tabTrigger>
  <description></description>
  <scope>source.c++</scope>
</snippet>